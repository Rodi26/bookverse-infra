name: Generate Enhanced OIDC Token
description: Generate OIDC token with application key scope using JFrog CLI and enhanced metadata
author: BookVerse Platform Team

inputs:
  oidc-provider-url:
    description: 'OIDC provider URL (JFrog URL)'
    required: true
  oidc-provider-name:
    description: 'OIDC provider name (e.g., bookverse-inventory-github)'
    required: true
  oidc-audience:
    description: 'OIDC audience'
    required: false
  service-name:
    description: 'Service name for metadata'
    required: true
  application-key:
    description: 'Application key for scoping'
    required: true
  version:
    description: 'Version for metadata'
    required: false
    default: 'latest'
  project-key:
    description: 'Project key for scoping'
    required: false
    default: 'bookverse'

outputs:
  auth-user:
    description: 'Authenticated user'
    value: ${{ steps.auth-token-generation.outputs.oidc-user }}
  auth-token:
    description: 'OIDC access token'
    value: ${{ steps.enhanced-token-exchange.outputs.enhanced-token }}
  token-metadata:
    description: 'Token metadata information'
    value: ${{ steps.enhanced-token-exchange.outputs.token-metadata }}

runs:
  using: "composite"
  steps:
    - name: Validate Inputs
      shell: bash
      run: |
        echo "üîç Validating OIDC token generation inputs..."
        echo "  ‚Ä¢ Provider URL: ${{ inputs.oidc-provider-url }}"
        echo "  ‚Ä¢ Provider Name: ${{ inputs.oidc-provider-name }}"
        echo "  ‚Ä¢ Service: ${{ inputs.service-name }}"
        echo "  ‚Ä¢ Application: ${{ inputs.application-key }}"
        echo "  ‚Ä¢ Version: ${{ inputs.version }}"
        echo "  ‚Ä¢ Project: ${{ inputs.project-key }}"
        
        # Validate required GitHub Actions environment
        if [[ -z "${ACTIONS_ID_TOKEN_REQUEST_URL:-}" || -z "${ACTIONS_ID_TOKEN_REQUEST_TOKEN:-}" ]]; then
          echo "‚ùå Missing GitHub OIDC environment variables"
          echo "   ACTIONS_ID_TOKEN_REQUEST_URL: ${ACTIONS_ID_TOKEN_REQUEST_URL:+SET}"
          echo "   ACTIONS_ID_TOKEN_REQUEST_TOKEN: ${ACTIONS_ID_TOKEN_REQUEST_TOKEN:+SET}"
          exit 1
        fi
        
        echo "‚úÖ Input validation completed"

    - name: Use JFrog CLI for Base Authentication (OIDC)
      id: auth-token-generation
      uses: jfrog/setup-jfrog-cli@v4
      env:
        JF_URL: ${{ inputs.oidc-provider-url }}
      with:
        oidc-provider-name: ${{ inputs.oidc-provider-name }}
        oidc-audience: ${{ inputs.oidc-audience || inputs.oidc-provider-url }}

    - name: Generate Enhanced Token with Metadata
      id: enhanced-token-exchange
      shell: bash
      run: |
        echo "üîë Generating enhanced OIDC token with metadata..."
        
        # Get GitHub OIDC ID token
        echo "  ‚Ä¢ Requesting GitHub OIDC ID token..."
        GITHUB_OIDC_TOKEN=$(curl -sS -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
          "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=${{ inputs.oidc-provider-url }}" | jq -r '.value')
        
        if [[ "$GITHUB_OIDC_TOKEN" == "null" || -z "$GITHUB_OIDC_TOKEN" ]]; then
          echo "‚ùå Failed to get GitHub OIDC ID token"
          exit 1
        fi
        
        echo "  ‚Ä¢ GitHub OIDC token obtained (length: ${#GITHUB_OIDC_TOKEN})"
        
        # Build enhanced payload with comprehensive metadata
        echo "  ‚Ä¢ Building enhanced token payload..."
        ENHANCED_PAYLOAD=$(jq -n \
          --arg jwt "$GITHUB_OIDC_TOKEN" \
          --arg provider_name "${{ inputs.oidc-provider-name }}" \
          --arg project_key "${{ inputs.project-key }}" \
          --arg job_id "$GITHUB_JOB" \
          --arg run_id "$GITHUB_RUN_ID" \
          --arg run_number "$GITHUB_RUN_NUMBER" \
          --arg repo "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY" \
          --arg revision "$GITHUB_SHA" \
          --arg branch "$GITHUB_REF_NAME" \
          --arg workflow "$GITHUB_WORKFLOW" \
          --arg actor "$GITHUB_ACTOR" \
          --arg application_key "${{ inputs.application-key }}" \
          --arg service_name "${{ inputs.service-name }}" \
          --arg version "${{ inputs.version }}" \
          --arg timestamp "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
          '{
            "grant_type": "urn:ietf:params:oauth:grant-type:token-exchange",
            "subject_token_type": "urn:ietf:params:oauth:token-type:id_token",
            "subject_token": $jwt,
            "provider_name": $provider_name,
            "project_key": $project_key,
            "job_id": $job_id,
            "run_id": $run_id,
            "run_number": $run_number,
            "repo": $repo,
            "revision": $revision,
            "branch": $branch,
            "workflow": $workflow,
            "actor": $actor,
            "application_key": $application_key,
            "service_name": $service_name,
            "version": $version,
            "timestamp": $timestamp
          }')
        
        # Exchange for enhanced JFrog token
        echo "  ‚Ä¢ Exchanging for enhanced JFrog access token..."
        TEMP_RESPONSE=$(mktemp)
        HTTP_STATUS=$(curl -sS -w "%{http_code}" -o "$TEMP_RESPONSE" \
          -X POST "${{ inputs.oidc-provider-url }}/access/api/v1/oidc/token" \
          -H "Content-Type: application/json" \
          -d "$ENHANCED_PAYLOAD")
        
        RESPONSE_BODY=$(cat "$TEMP_RESPONSE")
        rm -f "$TEMP_RESPONSE"
        
        if [[ "$HTTP_STATUS" -eq 200 || "$HTTP_STATUS" -eq 201 ]]; then
          ENHANCED_TOKEN=$(echo "$RESPONSE_BODY" | jq -r '.access_token')
          
          if [[ "$ENHANCED_TOKEN" == "null" || -z "$ENHANCED_TOKEN" ]]; then
            echo "‚ùå Failed to extract enhanced OIDC token from response"
            echo "Response: $RESPONSE_BODY"
            exit 1
          fi
          
          # Set environment variables for subsequent steps
          echo "JF_OIDC_TOKEN=$ENHANCED_TOKEN" >> "$GITHUB_ENV"
          echo "AUTH_TOKEN=$ENHANCED_TOKEN" >> "$GITHUB_ENV"
          
          # Version-specific token environment variable
          if [[ "${{ inputs.version }}" != "latest" ]]; then
            VERSION_VAR="JF_OIDC_TOKEN_$(echo "${{ inputs.version }}" | tr '.-' '_')"
            echo "$VERSION_VAR=$ENHANCED_TOKEN" >> "$GITHUB_ENV"
          fi
          
          # Set outputs
          echo "enhanced-token=$ENHANCED_TOKEN" >> "$GITHUB_OUTPUT"
          
          # Create token metadata
          TOKEN_METADATA=$(jq -c -n \
            --arg service "${{ inputs.service-name }}" \
            --arg version "${{ inputs.version }}" \
            --arg application "${{ inputs.application-key }}" \
            --arg project "${{ inputs.project-key }}" \
            --arg job_id "$GITHUB_JOB" \
            --arg run_id "$GITHUB_RUN_ID" \
            --arg timestamp "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            '{
              "service": $service,
              "version": $version,
              "application_key": $application,
              "project_key": $project,
              "job_id": $job_id,
              "run_id": $run_id,
              "generated_at": $timestamp
            }')
          
          echo "token-metadata=$TOKEN_METADATA" >> "$GITHUB_OUTPUT"
          
          echo "‚úÖ Enhanced OIDC token generated successfully for ${{ inputs.service-name }}"
          echo "  ‚Ä¢ Token length: ${#ENHANCED_TOKEN}"
          echo "  ‚Ä¢ Application: ${{ inputs.application-key }}"
          echo "  ‚Ä¢ Version: ${{ inputs.version }}"
          echo "  ‚Ä¢ Metadata included: job_id, run_id, revision, branch, workflow, actor"
          
        else
          echo "‚ùå Failed to generate enhanced OIDC token (HTTP $HTTP_STATUS)"
          echo "Response: $RESPONSE_BODY"
          exit 1
        fi

    - name: Verify Token and Set Docker Authentication
      shell: bash
      run: |
        echo "üîç Verifying enhanced OIDC token..."
        
        # Test token with JFrog ping
        if curl -sS -f -H "Authorization: Bearer $JF_OIDC_TOKEN" \
           "${{ inputs.oidc-provider-url }}/artifactory/api/system/ping" > /dev/null; then
          echo "‚úÖ Enhanced OIDC token verified successfully"
        else
          echo "‚ùå Enhanced OIDC token verification failed"
          exit 1
        fi
        
        # Extract Docker registry from JFrog URL if needed
        DOCKER_REGISTRY="${{ inputs.oidc-provider-url }}"
        DOCKER_REGISTRY="${DOCKER_REGISTRY#https://}"
        DOCKER_REGISTRY="${DOCKER_REGISTRY#http://}"
        
        # Extract username from JWT token for Docker login
        TOKEN_PAYLOAD=$(echo "$JF_OIDC_TOKEN" | cut -d. -f2)
        # Add padding if needed
        case $((${#TOKEN_PAYLOAD} % 4)) in
          2) TOKEN_PAYLOAD="${TOKEN_PAYLOAD}==" ;;
          3) TOKEN_PAYLOAD="${TOKEN_PAYLOAD}=" ;;
        esac
        
        CLAIMS=$(echo "$TOKEN_PAYLOAD" | tr '_-' '/+' | base64 -d 2>/dev/null || true)
        DOCKER_USER=$(echo "$CLAIMS" | jq -r '.username // .sub // .subject // "oauth2_access_token"' 2>/dev/null || echo "oauth2_access_token")
        
        # If sub is in the form jfac@.../users/<username>, extract the trailing <username>
        if [[ "$DOCKER_USER" == *"/users/"* ]]; then
          DOCKER_USER=${DOCKER_USER##*/users/}
        fi
        
        # Fallback to oauth2_access_token if no username found
        if [[ -z "$DOCKER_USER" || "$DOCKER_USER" == "null" ]]; then
          DOCKER_USER="oauth2_access_token"
        fi
        
        echo "üê≥ Configuring Docker authentication..."
        echo "  ‚Ä¢ Registry: $DOCKER_REGISTRY"
        echo "  ‚Ä¢ Username: $DOCKER_USER"
        
        # Perform Docker login
        echo "$JF_OIDC_TOKEN" | docker login "$DOCKER_REGISTRY" -u "$DOCKER_USER" --password-stdin
        
        echo "‚úÖ Docker authentication configured successfully"

branding:
  icon: 'key'
  color: 'blue'
