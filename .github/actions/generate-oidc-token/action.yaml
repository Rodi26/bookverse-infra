name: Generate Enhanced OIDC Token
description: Generate OIDC token with application key scope using JFrog CLI and enhanced metadata
author: BookVerse Platform Team

inputs:
  oidc-provider-url:
    description: 'OIDC provider URL (JFrog URL)'
    required: true
  oidc-provider-name:
    description: 'OIDC provider name (e.g., bookverse-inventory-github)'
    required: true
  oidc-audience:
    description: 'OIDC audience'
    required: false
  service-name:
    description: 'Service name for metadata'
    required: true
  application-key:
    description: 'Application key for scoping'
    required: true
  version:
    description: 'Version for metadata'
    required: false
    default: 'latest'
  project-key:
    description: 'Project key for scoping'
    required: false
    default: 'bookverse'

outputs:
  auth-user:
    description: 'Authenticated user'
    value: ${{ steps.auth-token-generation.outputs.oidc-user }}
  auth-token:
    description: 'OIDC access token'
    value: ${{ steps.enhanced-token-exchange.outputs.enhanced-token }}
  token-metadata:
    description: 'Token metadata information'
    value: ${{ steps.enhanced-token-exchange.outputs.token-metadata }}

runs:
  using: "composite"
  steps:
    - name: Validate Inputs
      shell: bash
      run: |
        echo "üîç Validating OIDC token generation inputs..."
        echo "  ‚Ä¢ Provider URL: ${{ inputs.oidc-provider-url }}"
        echo "  ‚Ä¢ Provider Name: ${{ inputs.oidc-provider-name }}"
        echo "  ‚Ä¢ Service: ${{ inputs.service-name }}"
        echo "  ‚Ä¢ Application: ${{ inputs.application-key }}"
        echo "  ‚Ä¢ Version: ${{ inputs.version }}"
        echo "  ‚Ä¢ Project: ${{ inputs.project-key }}"
        
        # Validate required GitHub Actions environment
        if [[ -z "${ACTIONS_ID_TOKEN_REQUEST_URL:-}" || -z "${ACTIONS_ID_TOKEN_REQUEST_TOKEN:-}" ]]; then
          echo "‚ùå Missing GitHub OIDC environment variables"
          echo "   ACTIONS_ID_TOKEN_REQUEST_URL: ${ACTIONS_ID_TOKEN_REQUEST_URL:+SET}"
          echo "   ACTIONS_ID_TOKEN_REQUEST_TOKEN: ${ACTIONS_ID_TOKEN_REQUEST_TOKEN:+SET}"
          exit 1
        fi
        
        echo "‚úÖ Input validation completed"

    - name: Use JFrog CLI for Base Authentication (OIDC)
      id: auth-token-generation
      uses: EyalDelarea/setup-jfrog-cli@swampUpAppTrust
      env:
        JF_URL: ${{ inputs.oidc-provider-url }}
      with:
        oidc-provider-name: ${{ inputs.oidc-provider-name }}
        oidc-audience: ${{ inputs.oidc-audience || inputs.oidc-provider-url }}

    - name: Verify Token and Set Docker Authentication
      shell: bash
      run: |
        echo "üîç Verifying enhanced OIDC token..."
        
        # Debug: Check available JFrog-related environment variables
        echo "üîç Checking available JFrog environment variables..."
        env | grep -i jf | head -10 || echo "No JF environment variables found"
        
        # The JFrog CLI action stores the token internally, we need to extract it
        # Let's try to get the token using jf CLI commands
        echo "üîç Attempting to extract token from JFrog CLI configuration..."
        
        # Try to get the access token from JFrog CLI config
        if command -v jf >/dev/null 2>&1; then
          # Get the server ID that was configured
          SERVER_ID="${SETUP_JFROG_CLI_SERVER_IDS:-setup-jfrog-cli-server}"
          echo "üìã Using server ID: $SERVER_ID"
          
          # Try to extract the token from JFrog CLI config
          if TOKEN=$(jf c show "$SERVER_ID" --format json 2>/dev/null | jq -r '.accessToken // empty' 2>/dev/null) && [[ -n "$TOKEN" && "$TOKEN" != "null" ]]; then
            echo "‚úÖ Successfully extracted token from JFrog CLI config"
          else
            echo "‚ö†Ô∏è Could not extract token from CLI config, trying alternative method..."
            # Alternative: try to use the CLI directly for authentication test
            if jf rt ping >/dev/null 2>&1; then
              echo "‚úÖ JFrog CLI authentication is working, will use CLI for Docker login"
              USE_CLI_AUTH=true
            else
              echo "‚ùå JFrog CLI authentication failed"
              exit 1
            fi
          fi
        else
          echo "‚ùå JFrog CLI not found"
          exit 1
        fi
        
        # Test authentication with JFrog ping
        if [[ "${USE_CLI_AUTH:-}" == "true" ]]; then
          echo "‚úÖ Using JFrog CLI authentication (token not directly accessible)"
        else
          if curl -sS -f -H "Authorization: Bearer $TOKEN" \
             "${{ inputs.oidc-provider-url }}/artifactory/api/system/ping" > /dev/null; then
            echo "‚úÖ Enhanced OIDC token verified successfully"
          else
            echo "‚ùå Enhanced OIDC token verification failed"
            exit 1
          fi
        fi
        
        # Extract Docker registry from JFrog URL if needed
        DOCKER_REGISTRY="${{ inputs.oidc-provider-url }}"
        DOCKER_REGISTRY="${DOCKER_REGISTRY#https://}"
        DOCKER_REGISTRY="${DOCKER_REGISTRY#http://}"
        
        # Extract username from JWT token for Docker login
        TOKEN_PAYLOAD=$(echo "$TOKEN" | cut -d. -f2)
        # Add padding if needed
        case $((${#TOKEN_PAYLOAD} % 4)) in
          2) TOKEN_PAYLOAD="${TOKEN_PAYLOAD}==" ;;
          3) TOKEN_PAYLOAD="${TOKEN_PAYLOAD}=" ;;
        esac
        
        CLAIMS=$(echo "$TOKEN_PAYLOAD" | tr '_-' '/+' | base64 -d 2>/dev/null || true)
        DOCKER_USER=$(echo "$CLAIMS" | jq -r '.username // .sub // .subject // "oauth2_access_token"' 2>/dev/null || echo "oauth2_access_token")
        
        # If sub is in the form jfac@.../users/<username>, extract the trailing <username>
        if [[ "$DOCKER_USER" == *"/users/"* ]]; then
          DOCKER_USER=${DOCKER_USER##*/users/}
        fi
        
        # Fallback to oauth2_access_token if no username found
        if [[ -z "$DOCKER_USER" || "$DOCKER_USER" == "null" ]]; then
          DOCKER_USER="oauth2_access_token"
        fi
        
        echo "üê≥ Configuring Docker authentication..."
        echo "  ‚Ä¢ Registry: $DOCKER_REGISTRY"
        echo "  ‚Ä¢ Username: $DOCKER_USER"
        
        if [[ "${USE_CLI_AUTH:-}" == "true" ]]; then
          echo "  ‚Ä¢ Method: JFrog CLI authentication (token not directly accessible)"
          echo "‚úÖ Docker authentication will be handled by JFrog CLI during build operations"
          echo "üìã Note: Use 'jf docker' commands instead of direct 'docker' commands for authenticated operations"
        else
          echo "  ‚Ä¢ Token: ${TOKEN:0:10}... (truncated for security)"
          
          # Perform Docker login (non-interactive)
          if echo "$TOKEN" | docker login "$DOCKER_REGISTRY" -u "$DOCKER_USER" --password-stdin 2>/dev/null; then
            echo "‚úÖ Docker authentication configured via login command"
          else
            echo "‚ö†Ô∏è Standard Docker login failed, but JFrog CLI authentication is available"
            echo "üìã Note: Use 'jf docker' commands for authenticated Docker operations"
          fi
        fi
        
        # Verify Docker authentication works
        echo "üîç Verifying Docker authentication..."
        if docker info > /dev/null 2>&1; then
          echo "‚úÖ Docker daemon is accessible"
        else
          echo "‚ö†Ô∏è Docker daemon not accessible, but authentication may still work for builds"
        fi
        
        echo "‚úÖ Docker authentication configured successfully"

branding:
  icon: 'lock'
  color: 'blue'
