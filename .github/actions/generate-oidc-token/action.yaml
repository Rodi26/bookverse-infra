name: Generate Enhanced OIDC Token
description: Generate OIDC token with application key scope using JFrog CLI and enhanced metadata
author: BookVerse Platform Team

inputs:
  oidc-provider-url:
    description: 'OIDC provider URL (JFrog URL)'
    required: true
  oidc-provider-name:
    description: 'OIDC provider name (e.g., bookverse-inventory-github)'
    required: true
  oidc-audience:
    description: 'OIDC audience'
    required: false
  service-name:
    description: 'Service name for metadata'
    required: true
  application-key:
    description: 'Application key for scoping'
    required: true
  version:
    description: 'Version for metadata'
    required: false
    default: 'latest'
  project-key:
    description: 'Project key for scoping'
    required: false
    default: 'bookverse'

outputs:
  auth-user:
    description: 'Authenticated user'
    value: ${{ steps.auth-token-generation.outputs.oidc-user }}
  auth-token:
    description: 'OIDC access token'
    value: ${{ steps.enhanced-token-exchange.outputs.enhanced-token }}
  token-metadata:
    description: 'Token metadata information'
    value: ${{ steps.enhanced-token-exchange.outputs.token-metadata }}

runs:
  using: "composite"
  steps:
    - name: Validate Inputs
      shell: bash
      run: |
        echo "üîç Validating OIDC token generation inputs..."
        echo "  ‚Ä¢ Provider URL: ${{ inputs.oidc-provider-url }}"
        echo "  ‚Ä¢ Provider Name: ${{ inputs.oidc-provider-name }}"
        echo "  ‚Ä¢ Service: ${{ inputs.service-name }}"
        echo "  ‚Ä¢ Application: ${{ inputs.application-key }}"
        echo "  ‚Ä¢ Version: ${{ inputs.version }}"
        echo "  ‚Ä¢ Project: ${{ inputs.project-key }}"
        
        # Validate required GitHub Actions environment
        if [[ -z "${ACTIONS_ID_TOKEN_REQUEST_URL:-}" || -z "${ACTIONS_ID_TOKEN_REQUEST_TOKEN:-}" ]]; then
          echo "‚ùå Missing GitHub OIDC environment variables"
          echo "   ACTIONS_ID_TOKEN_REQUEST_URL: ${ACTIONS_ID_TOKEN_REQUEST_URL:+SET}"
          echo "   ACTIONS_ID_TOKEN_REQUEST_TOKEN: ${ACTIONS_ID_TOKEN_REQUEST_TOKEN:+SET}"
          exit 1
        fi
        
        echo "‚úÖ Input validation completed"

    - name: Use JFrog CLI for Base Authentication (OIDC)
      id: auth-token-generation
      uses: EyalDelarea/setup-jfrog-cli@swampUpAppTrust
      env:
        JF_URL: ${{ inputs.oidc-provider-url }}
      with:
        oidc-provider-name: ${{ inputs.oidc-provider-name }}
        oidc-audience: ${{ inputs.oidc-audience || inputs.oidc-provider-url }}

    - name: Verify Token and Set Docker Authentication
      shell: bash
      run: |
        echo "üîç Verifying enhanced OIDC token..."
        
        # Test token with JFrog ping
        if curl -sS -f -H "Authorization: Bearer $JF_OIDC_TOKEN" \
           "${{ inputs.oidc-provider-url }}/artifactory/api/system/ping" > /dev/null; then
          echo "‚úÖ Enhanced OIDC token verified successfully"
        else
          echo "‚ùå Enhanced OIDC token verification failed"
          exit 1
        fi
        
        # Extract Docker registry from JFrog URL if needed
        DOCKER_REGISTRY="${{ inputs.oidc-provider-url }}"
        DOCKER_REGISTRY="${DOCKER_REGISTRY#https://}"
        DOCKER_REGISTRY="${DOCKER_REGISTRY#http://}"
        
        # Extract username from JWT token for Docker login
        TOKEN_PAYLOAD=$(echo "$JF_OIDC_TOKEN" | cut -d. -f2)
        # Add padding if needed
        case $((${#TOKEN_PAYLOAD} % 4)) in
          2) TOKEN_PAYLOAD="${TOKEN_PAYLOAD}==" ;;
          3) TOKEN_PAYLOAD="${TOKEN_PAYLOAD}=" ;;
        esac
        
        CLAIMS=$(echo "$TOKEN_PAYLOAD" | tr '_-' '/+' | base64 -d 2>/dev/null || true)
        DOCKER_USER=$(echo "$CLAIMS" | jq -r '.username // .sub // .subject // "oauth2_access_token"' 2>/dev/null || echo "oauth2_access_token")
        
        # If sub is in the form jfac@.../users/<username>, extract the trailing <username>
        if [[ "$DOCKER_USER" == *"/users/"* ]]; then
          DOCKER_USER=${DOCKER_USER##*/users/}
        fi
        
        # Fallback to oauth2_access_token if no username found
        if [[ -z "$DOCKER_USER" || "$DOCKER_USER" == "null" ]]; then
          DOCKER_USER="oauth2_access_token"
        fi
        
        echo "üê≥ Configuring Docker authentication..."
        echo "  ‚Ä¢ Registry: $DOCKER_REGISTRY"
        echo "  ‚Ä¢ Username: $DOCKER_USER"
        
        # Perform Docker login
        echo "$JF_OIDC_TOKEN" | docker login "$DOCKER_REGISTRY" -u "$DOCKER_USER" --password-stdin
        
        echo "‚úÖ Docker authentication configured successfully"

branding:
  icon: 'key'
  color: 'blue'
