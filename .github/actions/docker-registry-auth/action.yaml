name: 'Docker Registry Authentication'
description: 'Authenticate Docker with JFrog registry using OIDC token'
author: 'BookVerse DevOps Team'

inputs:
  oidc-token:
    description: 'OIDC token for authentication'
    required: true
  registry-url:
    description: 'JFrog registry URL'
    required: true
  verbosity:
    description: 'Verbosity level: none, feedback, debug'
    required: false
    default: 'feedback'

outputs:
  registry-host:
    description: 'The registry hostname that was authenticated'
    value: ${{ steps.auth.outputs.registry-host }}
  username:
    description: 'The username used for authentication'
    value: ${{ steps.auth.outputs.username }}

runs:
  using: "composite"
  steps:
    - name: Authenticate Docker Registry
      id: auth
      shell: bash
      run: |
        set -euo pipefail
        
        # Configure verbosity based on input
        case "${{ inputs.verbosity }}" in
          "none") QUIET=true; DEBUG=false ;;
          "debug") QUIET=false; DEBUG=true ;;
          *) QUIET=false; DEBUG=false ;;  # feedback mode (default)
        esac
        
        [[ "$DEBUG" == "true" ]] && echo "🔍 Debug mode enabled for Docker registry authentication"
        [[ "$QUIET" != "true" ]] && echo "🔐 Authenticating Docker with JFrog registry..."
        
        # Validate inputs
        OIDC_TOKEN="${{ inputs.oidc-token }}"
        if [[ -z "$OIDC_TOKEN" ]]; then
          echo "❌ OIDC token not provided" >&2
          exit 1
        fi
        
        REGISTRY_URL="${{ inputs.registry-url }}"
        if [[ -z "$REGISTRY_URL" ]]; then
          echo "❌ Registry URL not provided" >&2
          exit 1
        fi
        
        # Extract Docker registry hostname from JFrog URL
        DOCKER_REGISTRY="${REGISTRY_URL}"
        DOCKER_REGISTRY="${DOCKER_REGISTRY#https://}"
        DOCKER_REGISTRY="${DOCKER_REGISTRY#http://}"
        DOCKER_REGISTRY="${DOCKER_REGISTRY%/}"  # Remove trailing slash if present
        
        [[ "$DEBUG" == "true" ]] && echo "🐳 Registry hostname: $DOCKER_REGISTRY"
        
        # Extract username from JWT token payload
        [[ "$DEBUG" == "true" ]] && echo "🔍 Parsing JWT token for username..."
        TOKEN_PAYLOAD=$(echo "$OIDC_TOKEN" | cut -d. -f2)
        
        # Add base64 padding if needed
        case $((${#TOKEN_PAYLOAD} % 4)) in
          2) TOKEN_PAYLOAD="${TOKEN_PAYLOAD}==" ;;
          3) TOKEN_PAYLOAD="${TOKEN_PAYLOAD}=" ;;
        esac
        
        # Decode JWT payload to extract claims
        CLAIMS=$(echo "$TOKEN_PAYLOAD" | tr '_-' '/+' | base64 -d 2>/dev/null || true)
        if [[ -z "$CLAIMS" ]]; then
          echo "❌ Failed to decode JWT token payload" >&2
          exit 1
        fi
        
        # Extract username with fallback strategy
        DOCKER_USER=$(echo "$CLAIMS" | jq -r '.username // .sub // .subject // "oauth2_access_token"' 2>/dev/null || echo "oauth2_access_token")
        
        # Handle JFrog user format: jfac@.../users/<username>
        if [[ "$DOCKER_USER" == *"/users/"* ]]; then
          DOCKER_USER=${DOCKER_USER##*/users/}
          [[ "$DEBUG" == "true" ]] && echo "🔍 Extracted username from JFrog path format"
        fi
        
        # Final fallback if no username found or null
        if [[ -z "$DOCKER_USER" || "$DOCKER_USER" == "null" ]]; then
          DOCKER_USER="oauth2_access_token"
          [[ "$DEBUG" == "true" ]] && echo "🔍 Using fallback username: oauth2_access_token"
        fi
        
        [[ "$DEBUG" == "true" ]] && echo "📋 Authentication details:"
        [[ "$DEBUG" == "true" ]] && echo "  • Registry: $DOCKER_REGISTRY"
        [[ "$DEBUG" == "true" ]] && echo "  • Username: $DOCKER_USER"
        [[ "$DEBUG" == "true" ]] && echo "  • Token: ${OIDC_TOKEN:0:10}*** (truncated for security)"
        
        # Perform Docker login
        [[ "$QUIET" != "true" ]] && echo "🐳 Performing Docker registry login..."
        if echo "$OIDC_TOKEN" | docker login "$DOCKER_REGISTRY" -u "$DOCKER_USER" --password-stdin 2>/dev/null; then
          [[ "$QUIET" != "true" ]] && echo "✅ Docker authentication successful"
        else
          echo "❌ Docker authentication failed" >&2
          [[ "$DEBUG" == "true" ]] && echo "🔍 Check that the OIDC token has proper permissions for registry: $DOCKER_REGISTRY"
          exit 1
        fi
        
        # Set outputs for potential use by subsequent steps
        echo "registry-host=$DOCKER_REGISTRY" >> $GITHUB_OUTPUT
        echo "username=$DOCKER_USER" >> $GITHUB_OUTPUT
        
        [[ "$DEBUG" == "true" ]] && echo "✅ Docker registry authentication completed successfully"
        
        # Ensure clean exit
        exit 0

branding:
  icon: 'lock'
  color: 'blue'
