name: "BookVerse Shared OIDC Authentication"

# Reusable workflow for OIDC token minting and JFrog authentication
# Consolidates the complex manual OIDC token exchange logic used across all services

on:
  workflow_call:
    inputs:
      service-name:
        description: 'Service name for OIDC provider identification'
        required: true
        type: string
      jfrog-url:
        description: 'JFrog platform URL'
        required: false
        type: string
        default: ${{ vars.JFROG_URL }}
      oidc-provider-name:
        description: 'OIDC provider name in JFrog'
        required: false
        type: string
        default: ${{ vars.OIDC_PROVIDER_NAME }}
      oidc-audience:
        description: 'OIDC audience (typically JFrog URL)'
        required: false
        type: string
        default: ${{ vars.OIDC_AUDIENCE }}
      token-variable-name:
        description: 'Environment variable name for the token'
        required: false
        type: string
        default: 'JF_OIDC_TOKEN'
      fallback-to-action:
        description: 'Fallback to jfrog/setup-jfrog-cli action if manual exchange fails'
        required: false
        type: boolean
        default: true
    outputs:
      token-method:
        description: 'Method used for authentication (manual|action|cached)'
        value: ${{ jobs.authenticate.outputs.method }}
      token-status:
        description: 'Status of token acquisition (success|failed)'
        value: ${{ jobs.authenticate.outputs.status }}

jobs:
  authenticate:
    name: "OIDC Authentication: ${{ inputs.service-name }}"
    runs-on: ubuntu-latest
    
    outputs:
      method: ${{ steps.auth-result.outputs.method }}
      status: ${{ steps.auth-result.outputs.status }}
    
    steps:
      # =================================================================
      # OIDC TOKEN MINTING & EXCHANGE (Manual Implementation)
      # =================================================================
      
      - name: "🔐 GitHub OIDC Token Minting & JFrog Exchange"
        id: manual-oidc
        run: |
          echo "🔐 Starting OIDC token minting and exchange for ${{ inputs.service-name }}"
          
          # Validate required environment variables
          if [[ -z "$ACTIONS_ID_TOKEN_REQUEST_TOKEN" || -z "$ACTIONS_ID_TOKEN_REQUEST_URL" ]]; then
            echo "❌ Missing GitHub OIDC request environment variables"
            echo "   ACTIONS_ID_TOKEN_REQUEST_TOKEN: ${ACTIONS_ID_TOKEN_REQUEST_TOKEN:+SET}"
            echo "   ACTIONS_ID_TOKEN_REQUEST_URL: ${ACTIONS_ID_TOKEN_REQUEST_URL:+SET}"
            echo "manual_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Set JFrog URL and validate
          JF_URL="${{ inputs.jfrog-url }}"
          if [[ -z "$JF_URL" ]]; then
            echo "❌ JFrog URL not provided"
            echo "manual_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "🎯 Target JFrog Platform: $JF_URL"
          echo "🏷️ Service: ${{ inputs.service-name }}"
          echo "🔑 OIDC Provider: ${{ inputs.oidc-provider-name }}"
          echo "👥 OIDC Audience: ${{ inputs.oidc-audience }}"
          
          # Step 1: Mint GitHub OIDC ID token
          echo "🔄 Step 1: Minting GitHub OIDC ID token..."
          GITHUB_TOKEN_RESPONSE=$(curl -sS -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=${{ inputs.oidc-audience }}")
          
          if [[ $? -ne 0 ]]; then
            echo "❌ Failed to request GitHub OIDC token"
            echo "manual_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          GITHUB_OIDC_TOKEN=$(echo "$GITHUB_TOKEN_RESPONSE" | jq -r '.value // empty')
          if [[ -z "$GITHUB_OIDC_TOKEN" || "$GITHUB_OIDC_TOKEN" == "null" ]]; then
            echo "❌ Failed to extract GitHub OIDC token from response"
            echo "Response: $GITHUB_TOKEN_RESPONSE"
            echo "manual_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "✅ GitHub OIDC token minted successfully"
          
          # Step 2: Exchange GitHub OIDC token for JFrog access token
          echo "🔄 Step 2: Exchanging OIDC token for JFrog access token..."
          
          # Prepare token exchange payload
          EXCHANGE_PAYLOAD=$(jq -n \
            --arg grant_type "urn:ietf:params:oauth:grant-type:token-exchange" \
            --arg subject_token_type "urn:ietf:params:oauth:token-type:id_token" \
            --arg subject_token "$GITHUB_OIDC_TOKEN" \
            --arg provider_name "${{ inputs.oidc-provider-name }}" \
            '{
              grant_type: $grant_type,
              subject_token_type: $subject_token_type,
              subject_token: $subject_token,
              provider_name: $provider_name
            }')
          
          # Exchange token with JFrog
          JFROG_TOKEN_RESPONSE=$(curl -sS -X POST \
            -H "Content-Type: application/json" \
            -d "$EXCHANGE_PAYLOAD" \
            "$JF_URL/access/api/v1/oidc/token")
          
          if [[ $? -ne 0 ]]; then
            echo "❌ Failed to exchange OIDC token with JFrog"
            echo "manual_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Extract JFrog access token
          JF_OIDC_TOKEN=$(echo "$JFROG_TOKEN_RESPONSE" | jq -r '.access_token // empty')
          if [[ -z "$JF_OIDC_TOKEN" || "$JF_OIDC_TOKEN" == "null" ]]; then
            echo "❌ Failed to extract JFrog access token from response"
            echo "Response: $JFROG_TOKEN_RESPONSE"
            echo "manual_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Set the token in environment with the specified variable name
          echo "${{ inputs.token-variable-name }}=$JF_OIDC_TOKEN" >> $GITHUB_ENV
          
          # Also set standard JF_OIDC_TOKEN for JFrog CLI compatibility
          echo "JF_OIDC_TOKEN=$JF_OIDC_TOKEN" >> $GITHUB_ENV
          
          echo "✅ JFrog access token obtained and configured"
          echo "🔧 Token available as: \${{ inputs.token-variable-name }}"
          echo "🔧 Token available as: \$JF_OIDC_TOKEN (JFrog CLI)"
          
          # Validate token by testing JFrog API
          echo "🔍 Validating token with JFrog API..."
          PING_RESPONSE=$(curl -sS -H "Authorization: Bearer $JF_OIDC_TOKEN" \
            "$JF_URL/artifactory/api/system/ping")
          
          if [[ "$PING_RESPONSE" == "OK" ]]; then
            echo "✅ Token validation successful - JFrog API accessible"
            echo "manual_success=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Token obtained but validation failed (ping response: $PING_RESPONSE)"
            echo "manual_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi
      
      # =================================================================
      # FALLBACK: JFROG SETUP ACTION (If manual exchange fails)
      # =================================================================
      
      - name: "🔄 Fallback: JFrog CLI Setup Action"
        if: ${{ inputs.fallback-to-action && steps.manual-oidc.outputs.manual_success != 'true' }}
        id: action-fallback
        uses: jfrog/setup-jfrog-cli@v3
        env:
          JF_URL: ${{ inputs.jfrog-url }}
        with:
          oidc-provider-name: ${{ inputs.oidc-provider-name }}
          oidc-audience: ${{ inputs.oidc-audience }}
      
      # =================================================================
      # AUTHENTICATION RESULT & SUMMARY
      # =================================================================
      
      - name: "📋 Authentication Result Summary"
        id: auth-result
        run: |
          echo "📋 OIDC Authentication Summary for ${{ inputs.service-name }}"
          echo "=============================================="
          
          if [[ "${{ steps.manual-oidc.outputs.manual_success }}" == "true" ]]; then
            echo "✅ Method: Manual OIDC token exchange"
            echo "✅ Status: Success"
            echo "🔧 Token Variable: ${{ inputs.token-variable-name }}"
            echo "🔧 JFrog CLI: Configured with JF_OIDC_TOKEN"
            echo "method=manual" >> $GITHUB_OUTPUT
            echo "status=success" >> $GITHUB_OUTPUT
          elif [[ "${{ inputs.fallback-to-action }}" == "true" && "${{ steps.action-fallback.conclusion }}" == "success" ]]; then
            echo "✅ Method: JFrog CLI Setup Action (fallback)"
            echo "✅ Status: Success"
            echo "🔧 JFrog CLI: Configured by action"
            echo "method=action" >> $GITHUB_OUTPUT
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ Method: Failed"
            echo "❌ Status: Authentication failed"
            echo "💡 Manual OIDC exchange failed and fallback disabled/failed"
            echo "method=failed" >> $GITHUB_OUTPUT
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo ""
          echo "🎯 Ready for JFrog CLI operations"
          echo "📋 Environment variables set:"
          echo "   - JF_OIDC_TOKEN (for JFrog CLI)"
          echo "   - ${{ inputs.token-variable-name }} (service-specific)"
      
      # =================================================================
      # TOKEN VALIDATION & CLI TEST
      # =================================================================
      
      - name: "🧪 JFrog CLI Validation Test"
        run: |
          echo "🧪 Testing JFrog CLI functionality..."
          
          # Test basic JFrog CLI commands
          if command -v jf >/dev/null 2>&1; then
            echo "✅ JFrog CLI available"
            
            # Test authentication
            if jf rt ping; then
              echo "✅ JFrog CLI authentication successful"
            else
              echo "⚠️ JFrog CLI ping failed, but token may still be valid for API calls"
            fi
          else
            echo "ℹ️ JFrog CLI not installed, but token is available for direct API calls"
          fi
          
          echo "🎉 OIDC Authentication workflow completed successfully"
